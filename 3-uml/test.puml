@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class AbstractDataSourceProcessor {
  + AbstractDataSourceProcessor():
  - POSSIBLE_MALICIOUS_KEYS: Set<String>
  - IPV6_PATTERN: Pattern
  - DATABASE_PATTER: Pattern
  - log: Logger
  - IPV4_PATTERN: Pattern
  - PARAMS_PATTER: Pattern
  # transformOtherParamToMap(String): Map<String, String>
  # checkOther(Map<String, String>): void
  # checkHost(String): void
  + splitAndRemoveComment(String): List<String>
  + getDatasourceUniqueId(ConnectionParam, DbType): String
  + checkDataSourceConnectivity(ConnectionParam): boolean
  # checkDatabasePatter(String): void
  + checkDatasourceParam(BaseDataSourceParamDTO): void
}
interface AdHocDataSourceClient << interface >>
class BaseAdHocDataSourceClient {
  # BaseAdHocDataSourceClient(BaseConnectionParam, DbType):
  - baseConnectionParam: BaseConnectionParam
  - dbType: DbType
  + getConnection(): Connection
  + close(): void
}
class BaseConnectionParam {
  + BaseConnectionParam():
  # driverClassName: String
  # jdbcUrl: String
  # validationQuery: String
  # password: String
  # other: Map<String, String>
  # user: String
  # compatibleMode: String
  # driverLocation: String
  # database: String
  # address: String
  + getPassword(): String
  + getUser(): String
  + getAddress(): String
  + getDatabase(): String
  + setDatabase(String): void
  + getJdbcUrl(): String
  + setValidationQuery(String): void
  + hashCode(): int
  + setOther(Map<String, String>): void
  # canEqual(Object): boolean
  + setPassword(String): void
  + getDriverLocation(): String
  + getDriverClassName(): String
  + getValidationQuery(): String
  + getCompatibleMode(): String
  + setUser(String): void
  + setJdbcUrl(String): void
  + setAddress(String): void
  + setCompatibleMode(String): void
  + toString(): String
  + getOther(): Map<String, String>
  + equals(Object): boolean
  + setDriverLocation(String): void
  + setDriverClassName(String): void
}
class BasePooledDataSourceClient {
  + BasePooledDataSourceClient(BaseConnectionParam, DbType):
  # baseConnectionParam: BaseConnectionParam
  # dataSource: HikariDataSource
  - log: Logger
  + createDataSourcePool(BaseConnectionParam, DbType): HikariDataSource
  + close(): void
  + getConnection(): Connection
}
interface ConnectionParam << interface >> {
  + getPassword(): String
  + setPassword(String): void
}
interface DataSourceChannel << interface >> {
  + createAdHocDataSourceClient(BaseConnectionParam, DbType): AdHocDataSourceClient
  + createPooledDataSourceClient(BaseConnectionParam, DbType): PooledDataSourceClient
}
interface DataSourceChannelFactory << interface >> {
  + getName(): String
  + getIdentify(): SPIIdentify
  + create(): DataSourceChannel
}
interface DataSourceClient << interface >> {
  + getConnection(): Connection
}
class DataSourceClientProvider {
  + DataSourceClientProvider():
  - log: Logger
  - dataSourcePluginManager: DataSourcePluginManager
  - POOLED_DATASOURCE_CLIENT_CACHE: Cache<String, PooledDataSourceClient>
  + getPooledDataSourceClient(DbType, ConnectionParam): DataSourceClient
  + getAdHocConnection(DbType, ConnectionParam): Connection
  + getAdHocDataSourceClient(DbType, ConnectionParam): AdHocDataSourceClient
  + getPooledConnection(DbType, ConnectionParam): Connection
}
class DataSourcePluginManager {
  + DataSourcePluginManager():
  - datasourceChannelMap: Map<String, DataSourceChannel>
  - log: Logger
  + getDataSourceChannelMap(): Map<String, DataSourceChannel>
  - loadDatasourceClient(DataSourceChannelFactory): void
  + installPlugin(): void
}
interface DataSourceProcessor << interface >> {
  + splitAndRemoveComment(String): List<String>
  + getJdbcUrl(ConnectionParam): String
  + getDbType(): DbType
  + getValidationQuery(): String
  + createConnectionParams(BaseDataSourceParamDTO): ConnectionParam
  + createConnectionParams(String): ConnectionParam
  + getDatasourceUniqueId(ConnectionParam, DbType): String
  + createDatasourceParamDTO(String): BaseDataSourceParamDTO
  + create(): DataSourceProcessor
  + castDatasourceParamDTO(String): BaseDataSourceParamDTO
  + checkDatasourceParam(BaseDataSourceParamDTO): void
  + getDatasourceDriver(): String
  + getConnection(ConnectionParam): Connection
  + checkDataSourceConnectivity(ConnectionParam): boolean
}
class DataSourceProcessorManager {
  + DataSourceProcessorManager():
  - dataSourceProcessorMap: Map<String, DataSourceProcessor>
  - log: Logger
  + installProcessor(): void
  + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
  - loadDatasourceClient(DataSourceProcessor): void
}
class DataSourceProcessorProvider {
  - DataSourceProcessorProvider():
  - dataSourcePluginManager: DataSourceProcessorManager
  - log: Logger
  + getDataSourceProcessor(DbType): DataSourceProcessor
  + initialize(): void
  + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
}
class DefaultConnectionParam {
  + DefaultConnectionParam():
  + toString(): String
}
class MySQLAdHocDataSourceClient {
  + MySQLAdHocDataSourceClient(BaseConnectionParam, DbType):
}
class MySQLDataSourceProcessor {
  + MySQLDataSourceProcessor():
  - AUTO_DESERIALIZE: String
  - log: Logger
  - ALLOW_LOAD_LOCAL_IN_FILE_NAME: String
  - ALLOW_LOCAL_IN_FILE_NAME: String
  - ALLOW_URL_IN_LOCAL_IN_FILE_NAME: String
  + createConnectionParams(String): ConnectionParam
  + getDatasourceDriver(): String
  - checkKeyIsLegitimate(String): boolean
  - transformOther(Map<String, String>): String?
  + create(): DataSourceProcessor
  + getValidationQuery(): String
  + splitAndRemoveComment(String): List<String>
  + getJdbcUrl(ConnectionParam): String
  + castDatasourceParamDTO(String): BaseDataSourceParamDTO
  + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
  + getConnection(ConnectionParam): Connection
  + createDatasourceParamDTO(String): BaseDataSourceParamDTO
  - getConnectionProperties(MySQLConnectionParam, String, String): Properties
  + getDbType(): DbType
}
interface PooledDataSourceClient << interface >> {
  + createDataSourcePool(BaseConnectionParam, DbType): DataSource
}
class PostgreAdHocSQLDataSourceClient {
  + PostgreAdHocSQLDataSourceClient(BaseConnectionParam, DbType):
}
class PostgreSQLConnectionParam {
  + PostgreSQLConnectionParam():
  + toString(): String
}
class PostgreSQLDataSourceChannel {
  + PostgreSQLDataSourceChannel():
  + createAdHocDataSourceClient(BaseConnectionParam, DbType): AdHocDataSourceClient
  + createPooledDataSourceClient(BaseConnectionParam, DbType): PooledDataSourceClient
}
class PostgreSQLDataSourceChannelFactory {
  + PostgreSQLDataSourceChannelFactory():
  + create(): DataSourceChannel
  + getName(): String
}
class PostgreSQLDataSourceParamDTO {
  + PostgreSQLDataSourceParamDTO():
  + toString(): String
  + getType(): DbType
}
class PostgreSQLDataSourceProcessor {
  + PostgreSQLDataSourceProcessor():
  + getDatasourceDriver(): String
  + getConnection(ConnectionParam): Connection
  + create(): DataSourceProcessor
  - transformOther(Map<String, String>): String?
  + splitAndRemoveComment(String): List<String>
  + getJdbcUrl(ConnectionParam): String
  + castDatasourceParamDTO(String): BaseDataSourceParamDTO
  + getDbType(): DbType
  + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
  + createConnectionParams(String): ConnectionParam
  + createDatasourceParamDTO(String): BaseDataSourceParamDTO
  + getValidationQuery(): String
}
interface PrioritySPI << interface >> {
  + getIdentify(): SPIIdentify
  + compareTo(Integer): int
}
class PrioritySPIFactory<T> {
  + PrioritySPIFactory(Class<T>):
  - log: Logger
  - map: Map<String, T>
  + getSPIMap(): Map<String, T>
  - resolveConflict(T): void
}
class SqlTask {
  + SqlTask(TaskExecutionContext):
  - CREATE_OR_REPLACE_FUNCTION_FORMAT: String
  - sqlTaskExecutionContext: SQLTaskExecutionContext
  - log: Logger
  - sqlParameters: SqlParameters
  - baseConnectionParam: BaseConnectionParam
  - QUERY_LIMIT: int
  + TEST_FLAG_YES: int
  - dbType: DbType
  - taskExecutionContext: TaskExecutionContext
  - resultProcess(ResultSet): String
  + cancel(): void
  - executeUpdate(Connection, List<SqlBinds>, String): String
  - printReplacedSql(String, String, String, Map<Integer, Property>): void
  - getSqlAndSqlParamsMap(String): SqlBinds
  - generateEmptyRow(ResultSet): ArrayNode
  - setNonQuerySqlReturn(String, List<Property>): String
  + handle(TaskCallBack): void
  + getParameters(): AbstractParameters
  - replaceOriginalValue(String, String, Map<String, Property>): String
  + executeFuncAndSql(List<SqlBinds>, List<SqlBinds>, List<SqlBinds>): void
  - prepareStatementAndBind(Connection, SqlBinds): PreparedStatement
  - close(Connection): void
  - sendAttachment(int, String, String): void
  - executeQuery(Connection, SqlBinds, String): String
}

AbstractDataSourceProcessor         -[#008200,dashed]-^  DataSourceProcessor
AdHocDataSourceClient               -[#008200,plain]-^  DataSourceClient
BaseAdHocDataSourceClient           -[#008200,dashed]-^  AdHocDataSourceClient
BaseAdHocDataSourceClient          "1" *-[#595959,plain]-> "baseConnectionParam\n1" BaseConnectionParam
BaseConnectionParam                 -[#008200,dashed]-^  ConnectionParam
BasePooledDataSourceClient         "1" *-[#595959,plain]-> "baseConnectionParam\n1" BaseConnectionParam
BasePooledDataSourceClient          -[#008200,dashed]-^  PooledDataSourceClient
DataSourceChannelFactory            -[#008200,plain]-^  PrioritySPI
DataSourceClientProvider           "1" *-[#595959,plain]-> "dataSourcePluginManager\n1" DataSourcePluginManager
DataSourceClientProvider            -[#595959,dashed]->  DataSourcePluginManager            : "«create»"
DataSourcePluginManager            "1" *-[#595959,plain]-> "datasourceChannelMap\n*" DataSourceChannel
DataSourcePluginManager             -[#595959,dashed]->  PrioritySPIFactory                 : "«create»"
DataSourceProcessorManager         "1" *-[#595959,plain]-> "dataSourceProcessorMap\n*" DataSourceProcessor
DataSourceProcessorProvider         -[#595959,dashed]->  DataSourceProcessorManager         : "«create»"
DataSourceProcessorProvider        "1" *-[#595959,plain]-> "dataSourcePluginManager\n1" DataSourceProcessorManager
DefaultConnectionParam              -[#000082,plain]-^  BaseConnectionParam
MySQLAdHocDataSourceClient          -[#000082,plain]-^  BaseAdHocDataSourceClient
MySQLDataSourceProcessor            -[#000082,plain]-^  AbstractDataSourceProcessor
PooledDataSourceClient              -[#008200,plain]-^  DataSourceClient
PostgreAdHocSQLDataSourceClient     -[#000082,plain]-^  BaseAdHocDataSourceClient
PostgreSQLConnectionParam           -[#000082,plain]-^  BaseConnectionParam
PostgreSQLDataSourceChannel         -[#008200,dashed]-^  DataSourceChannel
PostgreSQLDataSourceChannel         -[#595959,dashed]->  PostgreAdHocSQLDataSourceClient    : "«create»"
PostgreSQLDataSourceChannelFactory  -[#008200,dashed]-^  DataSourceChannelFactory
PostgreSQLDataSourceChannelFactory  -[#595959,dashed]->  PostgreSQLDataSourceChannel        : "«create»"
PostgreSQLDataSourceProcessor       -[#000082,plain]-^  AbstractDataSourceProcessor
PostgreSQLDataSourceProcessor       -[#595959,dashed]->  PostgreSQLConnectionParam          : "«create»"
PostgreSQLDataSourceProcessor       -[#595959,dashed]->  PostgreSQLDataSourceParamDTO       : "«create»"
PrioritySPIFactory                  -[#595959,dashed]->  PrioritySPI
SqlTask                            "1" *-[#595959,plain]-> "baseConnectionParam\n1" BaseConnectionParam
@enduml

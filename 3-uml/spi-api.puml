@startuml

'!theme plain
'top to bottom direction
'skinparam linetype ortho

left to right direction
'package "SPI" #DDDDDD{

    interface PrioritySPI << interface >> {
      + getIdentify(): SPIIdentify
      + compareTo(Integer): int
    }

    class PrioritySPIFactory<T> {
      + PrioritySPIFactory(Class<T>):
      - log: Logger
      - map: Map<String, T>
      + getSPIMap(): Map<String, T>
      - resolveConflict(T): void
    }

    interface DataSourceChannel << interface >> {
      + createAdHocDataSourceClient(BaseConnectionParam, DbType): AdHocDataSourceClient
      + createPooledDataSourceClient(BaseConnectionParam, DbType): PooledDataSourceClient
    }
    interface DataSourceChannelFactory << interface >> {
      + create(): DataSourceChannel
      + getIdentify(): SPIIdentify
      + getName(): String
    }
    interface DataSourceClient << interface >> {
      + getConnection(): Connection
    }
    interface AdHocDataSourceClient << interface >>
    interface PooledDataSourceClient << interface >> {
      + createDataSourcePool(BaseConnectionParam, DbType): DataSource
    }
    interface ConnectionParam << interface >> {
      + setPassword(String): void
      + getPassword(): String
    }
    class BaseConnectionParam {
      + BaseConnectionParam():
      # other: Map<String, String>
      # validationQuery: String
      # driverLocation: String
      # address: String
      # compatibleMode: String
      # driverClassName: String
      # password: String
      # database: String
      # user: String
      # jdbcUrl: String
      + getAddress(): String
      + getUser(): String
      + setDriverClassName(String): void
      # canEqual(Object): boolean
      + hashCode(): int
      + getPassword(): String
      + getDatabase(): String
      + getJdbcUrl(): String
      + equals(Object): boolean
      + setAddress(String): void
      + setCompatibleMode(String): void
      + setUser(String): void
      + setPassword(String): void
      + getDriverLocation(): String
      + toString(): String
      + setDriverLocation(String): void
      + getDriverClassName(): String
      + getValidationQuery(): String
      + setDatabase(String): void
      + setValidationQuery(String): void
      + getCompatibleMode(): String
      + getOther(): Map<String, String>
      + setJdbcUrl(String): void
      + setOther(Map<String, String>): void
    }
    class DefaultConnectionParam {
      + DefaultConnectionParam():
      + toString(): String
    }

'}


package "API" #DDDDDD{

    class BaseAdHocDataSourceClient {
      # BaseAdHocDataSourceClient(BaseConnectionParam, DbType):
      - dbType: DbType
      - baseConnectionParam: BaseConnectionParam
      + getConnection(): Connection
      + close(): void
    }

    class BasePooledDataSourceClient {
      + BasePooledDataSourceClient(BaseConnectionParam, DbType):
      # dataSource: HikariDataSource
      - log: Logger
      # baseConnectionParam: BaseConnectionParam
      + createDataSourcePool(BaseConnectionParam, DbType): HikariDataSource
      + close(): void
      + getConnection(): Connection
    }

    interface DataSourceProcessor << interface >> {
      + getConnection(ConnectionParam): Connection
      + checkDataSourceConnectivity(ConnectionParam): boolean
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
      + create(): DataSourceProcessor
      + getDatasourceDriver(): String
      + createConnectionParams(String): ConnectionParam
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + getDatasourceUniqueId(ConnectionParam, DbType): String
      + getDbType(): DbType
      + getJdbcUrl(ConnectionParam): String
      + checkDatasourceParam(BaseDataSourceParamDTO): void
      + createConnectionParams(BaseDataSourceParamDTO): ConnectionParam
    }

    class AbstractDataSourceProcessor {
      + AbstractDataSourceProcessor():
      - IPV4_PATTERN: Pattern
      - POSSIBLE_MALICIOUS_KEYS: Set<String>
      - DATABASE_PATTER: Pattern
      - IPV6_PATTERN: Pattern
      - log: Logger
      - PARAMS_PATTER: Pattern
      # checkDatabasePatter(String): void
      + checkDatasourceParam(BaseDataSourceParamDTO): void
      + getDatasourceUniqueId(ConnectionParam, DbType): String
      + splitAndRemoveComment(String): List<String>
      # transformOtherParamToMap(String): Map<String, String>
      # checkHost(String): void
      # checkOther(Map<String, String>): void
      + checkDataSourceConnectivity(ConnectionParam): boolean
    }

    class DataSourceProcessorManager {
      + DataSourceProcessorManager():
      - dataSourceProcessorMap: Map<String, DataSourceProcessor>
      - log: Logger
      + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
      - loadDatasourceClient(DataSourceProcessor): void
      + installProcessor(): void
    }

    class DataSourceProcessorProvider {
      - DataSourceProcessorProvider():
      - log: Logger
      - dataSourcePluginManager: DataSourceProcessorManager
      + initialize(): void
      + getDataSourceProcessor(DbType): DataSourceProcessor
      + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
    }


    class DataSourceClientProvider {
      + DataSourceClientProvider():
      - POOLED_DATASOURCE_CLIENT_CACHE: Cache<String, PooledDataSourceClient>
      - log: Logger
      - dataSourcePluginManager: DataSourcePluginManager
      + getAdHocDataSourceClient(DbType, ConnectionParam): AdHocDataSourceClient
      + getPooledDataSourceClient(DbType, ConnectionParam): DataSourceClient
      + getPooledConnection(DbType, ConnectionParam): Connection
      + getAdHocConnection(DbType, ConnectionParam): Connection
    }
    class DataSourcePluginManager {
      + DataSourcePluginManager():
      - log: Logger
      - datasourceChannelMap: Map<String, DataSourceChannel>
      + getDataSourceChannelMap(): Map<String, DataSourceChannel>
      - loadDatasourceClient(DataSourceChannelFactory): void
      + installPlugin(): void
    }

}


package "ds-datasource-Postgresql" #DDDDDD{
    class PostgreAdHocSQLDataSourceClient {
      + PostgreAdHocSQLDataSourceClient(BaseConnectionParam, DbType):
    }
    class PostgreSQLDataSourceProcessor {
      + PostgreSQLDataSourceProcessor():
      + create(): DataSourceProcessor
      - transformOther(Map<String, String>): String?
      + getJdbcUrl(ConnectionParam): String
      + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getDbType(): DbType
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + getDatasourceDriver(): String
      + createConnectionParams(String): ConnectionParam
      + getConnection(ConnectionParam): Connection
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
    }

    class PostgreSQLDataSourceChannelFactory {
          + PostgreSQLDataSourceChannelFactory():
          + create(): DataSourceChannel
          + getName(): String
        }
}


package "ds-datasource-mysql" #DDDDDD{

    class MySQLAdHocDataSourceClient {
      + MySQLAdHocDataSourceClient(BaseConnectionParam, DbType):
    }
    class MySQLDataSourceProcessor {
      + MySQLDataSourceProcessor():
      - log: Logger
      - ALLOW_LOAD_LOCAL_IN_FILE_NAME: String
      - AUTO_DESERIALIZE: String
      - ALLOW_LOCAL_IN_FILE_NAME: String
      - ALLOW_URL_IN_LOCAL_IN_FILE_NAME: String
      + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
      - transformOther(Map<String, String>): String?
      + createConnectionParams(String): ConnectionParam
      + getJdbcUrl(ConnectionParam): String
      - getConnectionProperties(MySQLConnectionParam, String, String): Properties
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getConnection(ConnectionParam): Connection
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getDbType(): DbType
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + create(): DataSourceProcessor
      + getDatasourceDriver(): String
      - checkKeyIsLegitimate(String): boolean
    }

}


DataSourceProcessor                                                             ^-[#008200,dashed]-                     AbstractDataSourceProcessor
DataSourceProcessor                 "dataSourceProcessorMap*"                   <-[#595959,plain]-* "1"                 DataSourceProcessorManager
AbstractDataSourceProcessor                                                     ^-[#000082,plain]-                      PostgreSQLDataSourceProcessor
AbstractDataSourceProcessor                                                     ^-[#000082,plain]-                      MySQLDataSourceProcessor
DataSourceProcessorManager          "dataSourcePluginManager\n1"                <-[#595959,plain]-* "\n1"               DataSourceProcessorProvider
DataSourceProcessorManager                                                      <-[#595959,dashed]-                     DataSourceProcessorProvider : "«create»"


DataSourceClient                                                                ^-[#008200,plain]-                      AdHocDataSourceClient
DataSourceClient                                                                ^-[#008200,plain]-                      PooledDataSourceClient
AdHocDataSourceClient                                                           ^-[#008200,dashed]-                     BaseAdHocDataSourceClient
BaseAdHocDataSourceClient                                                       ^-[#000082,plain]-                      PostgreAdHocSQLDataSourceClient
BaseAdHocDataSourceClient                                                       ^-[#000082,plain]-                      MySQLAdHocDataSourceClient
PooledDataSourceClient                                                          ^-[#008200,dashed]-                     BasePooledDataSourceClient
BaseConnectionParam             "baseConnectionParam\n1"                        <-[#595959,plain]-* "1"                 BasePooledDataSourceClient
BaseConnectionParam             "baseConnectionParam\n1"                        <-[#595959,plain]-* "1"                 BaseAdHocDataSourceClient
ConnectionParam                                                                 ^-[#008200,dashed]-                     BaseConnectionParam
BaseConnectionParam                                                             ^-[#000082,plain]-                      DefaultConnectionParam

PrioritySPI                                                                     <-[#595959,dashed]-                     PrioritySPIFactory
PrioritySPI                                                                     ^-[#008200,plain]-                      DataSourceChannelFactory
DataSourceChannelFactory                                                        ^-[#008200,dashed]-                     PostgreSQLDataSourceChannelFactory
DataSourceChannel                                                               <-[#595959,dashed]-                     DataSourceChannelFactory           : "«create»"
DataSourceChannel               "datasourceChannelMap\n*"                       <-[#595959,plain]-* "1"                 DataSourcePluginManager
PrioritySPIFactory                                                              <-[#595959,dashed]-                     DataSourcePluginManager            : "«create»"
DataSourcePluginManager                                                         <-[#595959,dashed]-                     DataSourceClientProvider           : "«create»"
DataSourcePluginManager        "dataSourcePluginManager\n1"                     <-[#595959,plain]-* "1"                 DataSourceClientProvider



'AbstractDataSourceProcessor      -[#008200,dashed]-^  DataSourceProcessor
'DataSourceProcessorManager      "1" *-[#595959,plain]-> "dataSourceProcessorMap\n*" DataSourceProcessor
'MySQLDataSourceProcessor         -[#000082,plain]-^  AbstractDataSourceProcessor
'PostgreSQLDataSourceProcessor    -[#000082,plain]-^  AbstractDataSourceProcessor
'DataSourceProcessorProvider     "1" *-[#595959,plain]-> "dataSourcePluginManager\n1" DataSourceProcessorManager
'DataSourceProcessorProvider      -[#595959,dashed]->  DataSourceProcessorManager      : "«create»"

'AdHocDataSourceClient            -[#008200,plain]-^  DataSourceClient
'PooledDataSourceClient           -[#008200,plain]-^  DataSourceClient
'BaseAdHocDataSourceClient        -[#008200,dashed]-^  AdHocDataSourceClient
'BaseAdHocDataSourceClient       "1" *-[#595959,plain]-> "baseConnectionParam\n1" BaseConnectionParam
'PostgreAdHocSQLDataSourceClient  -[#000082,plain]-^  BaseAdHocDataSourceClient
'MySQLAdHocDataSourceClient       -[#000082,plain]-^  BaseAdHocDataSourceClient
'
'BasePooledDataSourceClient      "1" *-[#595959,plain]-> "baseConnectionParam\n1" BaseConnectionParam
'BasePooledDataSourceClient       -[#008200,dashed]-^  PooledDataSourceClient


'BaseConnectionParam              -[#008200,dashed]-^  ConnectionParam
'DefaultConnectionParam           -[#000082,plain]-^  BaseConnectionParam


'DataSourceChannelFactory         -[#008200,plain]-^  PrioritySPI
'DataSourcePluginManager         "1" *-[#595959,plain]-> "datasourceChannelMap\n*" DataSourceChannel
'DataSourcePluginManager          -[#595959,dashed]->  PrioritySPIFactory              : "«create»"
'PrioritySPIFactory               -[#595959,dashed]->  PrioritySPI
'DataSourceClientProvider         -[#595959,dashed]->  DataSourcePluginManager         : "«create»"
'DataSourceClientProvider        "1" *-[#595959,plain]-> "dataSourcePluginManager\n1" DataSourcePluginManager
@enduml

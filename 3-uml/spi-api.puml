@startuml

'!theme plain
'top to bottom direction
'skinparam linetype ortho

left to right direction
'package "SPI" #DDDDDD{

    interface PrioritySPI << interface >> {
      + getIdentify(): SPIIdentify
      + compareTo(Integer): int
    }

    class PrioritySPIFactory<T> {
      + PrioritySPIFactory(Class<T>):
      - log: Logger
      - map: Map<String, T>
      + getSPIMap(): Map<String, T>
      - resolveConflict(T): void
    }

    interface DataSourceChannel << interface >> {
      + createAdHocDataSourceClient(BaseConnectionParam, DbType): AdHocDataSourceClient
      + createPooledDataSourceClient(BaseConnectionParam, DbType): PooledDataSourceClient
    }
    interface DataSourceChannelFactory << interface >> {
      + create(): DataSourceChannel
      + getIdentify(): SPIIdentify
      + getName(): String
    }
    interface DataSourceClient << interface >> {
      + getConnection(): Connection
    }
    interface AdHocDataSourceClient << interface >>
    interface PooledDataSourceClient << interface >> {
      + createDataSourcePool(BaseConnectionParam, DbType): DataSource
    }
    interface ConnectionParam << interface >> {
      + setPassword(String): void
      + getPassword(): String
    }
    class BaseConnectionParam {
      + BaseConnectionParam():
      # other: Map<String, String>
      # validationQuery: String
      # driverLocation: String
      # address: String
      # compatibleMode: String
      # driverClassName: String
      # password: String
      # database: String
      # user: String
      # jdbcUrl: String
      + getAddress(): String
      + getUser(): String
      + setDriverClassName(String): void
      # canEqual(Object): boolean
      + hashCode(): int
      + getPassword(): String
      + getDatabase(): String
      + getJdbcUrl(): String
      + equals(Object): boolean
      + setAddress(String): void
      + setCompatibleMode(String): void
      + setUser(String): void
      + setPassword(String): void
      + getDriverLocation(): String
      + toString(): String
      + setDriverLocation(String): void
      + getDriverClassName(): String
      + getValidationQuery(): String
      + setDatabase(String): void
      + setValidationQuery(String): void
      + getCompatibleMode(): String
      + getOther(): Map<String, String>
      + setJdbcUrl(String): void
      + setOther(Map<String, String>): void
    }
    class DefaultConnectionParam {
      + DefaultConnectionParam():
      + toString(): String
    }

'}


package "API" #DDDDDD{

    class BaseAdHocDataSourceClient {
      # BaseAdHocDataSourceClient(BaseConnectionParam, DbType):
      - dbType: DbType
      - baseConnectionParam: BaseConnectionParam
      + getConnection(): Connection
      + close(): void
    }

    class BasePooledDataSourceClient {
      + BasePooledDataSourceClient(BaseConnectionParam, DbType):
      # dataSource: HikariDataSource
      - log: Logger
      # baseConnectionParam: BaseConnectionParam
      + createDataSourcePool(BaseConnectionParam, DbType): HikariDataSource
      + close(): void
      + getConnection(): Connection
    }

    interface DataSourceProcessor << interface >> {
      + getConnection(ConnectionParam): Connection
      + checkDataSourceConnectivity(ConnectionParam): boolean
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
      + create(): DataSourceProcessor
      + getDatasourceDriver(): String
      + createConnectionParams(String): ConnectionParam
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + getDatasourceUniqueId(ConnectionParam, DbType): String
      + getDbType(): DbType
      + getJdbcUrl(ConnectionParam): String
      + checkDatasourceParam(BaseDataSourceParamDTO): void
      + createConnectionParams(BaseDataSourceParamDTO): ConnectionParam
    }

    class AbstractDataSourceProcessor {
      + AbstractDataSourceProcessor():
      - IPV4_PATTERN: Pattern
      - POSSIBLE_MALICIOUS_KEYS: Set<String>
      - DATABASE_PATTER: Pattern
      - IPV6_PATTERN: Pattern
      - log: Logger
      - PARAMS_PATTER: Pattern
      # checkDatabasePatter(String): void
      + checkDatasourceParam(BaseDataSourceParamDTO): void
      + getDatasourceUniqueId(ConnectionParam, DbType): String
      + splitAndRemoveComment(String): List<String>
      # transformOtherParamToMap(String): Map<String, String>
      # checkHost(String): void
      # checkOther(Map<String, String>): void
      + checkDataSourceConnectivity(ConnectionParam): boolean
    }

    class DataSourceProcessorManager {
      + DataSourceProcessorManager():
      - dataSourceProcessorMap: Map<String, DataSourceProcessor>
      - log: Logger
      + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
      - loadDatasourceClient(DataSourceProcessor): void
      + installProcessor(): void
    }

    class DataSourceProcessorProvider {
      - DataSourceProcessorProvider():
      - log: Logger
      - dataSourcePluginManager: DataSourceProcessorManager
      + initialize(): void
      + getDataSourceProcessor(DbType): DataSourceProcessor
      + getDataSourceProcessorMap(): Map<String, DataSourceProcessor>
    }


    class DataSourceClientProvider {
      + DataSourceClientProvider():
      - POOLED_DATASOURCE_CLIENT_CACHE: Cache<String, PooledDataSourceClient>
      - log: Logger
      - dataSourcePluginManager: DataSourcePluginManager
      + getAdHocDataSourceClient(DbType, ConnectionParam): AdHocDataSourceClient
      + getPooledDataSourceClient(DbType, ConnectionParam): DataSourceClient
      + getPooledConnection(DbType, ConnectionParam): Connection
      + getAdHocConnection(DbType, ConnectionParam): Connection
    }
    class DataSourcePluginManager {
      + DataSourcePluginManager():
      - log: Logger
      - datasourceChannelMap: Map<String, DataSourceChannel>
      + getDataSourceChannelMap(): Map<String, DataSourceChannel>
      - loadDatasourceClient(DataSourceChannelFactory): void
      + installPlugin(): void
    }

' API 数据源处理器 start
  note top of DataSourceProcessor: 数据源处理器: \n 1、连接信息转换为DTO \n 2、check参数合理性 \n 3、获取连接getJdbcUrl\n 4、获取getDbType\n 5、创建DataSourceProcessor\n 6、获取连接：Connection getConnection()
  note top of DataSourceProcessorManager: 数据源处理器管理：生成DataSourceProcessor和缓存数据源处理器
  note top of DataSourceProcessorProvider: 数据源处理器提供者: 调用DataSourcePluginManager管理者获取DataSourceProcessor
' API 数据源处理器 end

' API 数据源客户端 start
  note top of DataSourcePluginManager: 数据源插件管理：生成获取各种类型数据源通道：DataSourceChannel，\n通过DataSourceChannelFactory生成DataSourceChannel
  note top of DataSourceClientProvider: 数据源客户端提供：通过DataSourceChannel\n生成AdHocDataSourceClient、PooledDataSourceClient两种客户端
' API 数据源客户端 end

  note top of BaseAdHocDataSourceClient: BaseAdHocDataSourceClient：全参构造函数指定了数据源参数和类型
  note top of BaseAdHocDataSourceClient:getConnection：根据参数+类型，通过DataSourceProcessorProvider\n.getDataSourceProcessor(dbType)\n.getConnection(baseConnectionParam)\n获取客户端连接



}


package "ds-datasource-Postgresql" #DDDDDD{
    class PostgreAdHocSQLDataSourceClient {
      + PostgreAdHocSQLDataSourceClient(BaseConnectionParam, DbType):
    }
    class PostgreSQLDataSourceProcessor {
      + PostgreSQLDataSourceProcessor():
      + create(): DataSourceProcessor
      - transformOther(Map<String, String>): String?
      + getJdbcUrl(ConnectionParam): String
      + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getDbType(): DbType
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + getDatasourceDriver(): String
      + createConnectionParams(String): ConnectionParam
      + getConnection(ConnectionParam): Connection
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
    }

    class PostgreSQLDataSourceChannelFactory {
          + PostgreSQLDataSourceChannelFactory():
          + create(): DataSourceChannel
          + getName(): String
   }

   class PostgreSQLDataSourceChannel {
     + PostgreSQLDataSourceChannel():
     + createAdHocDataSourceClient(BaseConnectionParam, DbType): AdHocDataSourceClient
     + createPooledDataSourceClient(BaseConnectionParam, DbType): PooledDataSourceClient
   }

   class PostgreSQLDataSourceParamDTO {
     + PostgreSQLDataSourceParamDTO():
     + toString(): String
     + getType(): DbType
   }

   class PostgreSQLConnectionParam {
     + PostgreSQLConnectionParam():
     + toString(): String
   }


}


package "ds-datasource-mysql" #DDDDDD{

    class MySQLAdHocDataSourceClient {
      + MySQLAdHocDataSourceClient(BaseConnectionParam, DbType):
    }
    class MySQLDataSourceProcessor {
      + MySQLDataSourceProcessor():
      - log: Logger
      - ALLOW_LOAD_LOCAL_IN_FILE_NAME: String
      - AUTO_DESERIALIZE: String
      - ALLOW_LOCAL_IN_FILE_NAME: String
      - ALLOW_URL_IN_LOCAL_IN_FILE_NAME: String
      + createConnectionParams(BaseDataSourceParamDTO): BaseConnectionParam
      - transformOther(Map<String, String>): String?
      + createConnectionParams(String): ConnectionParam
      + getJdbcUrl(ConnectionParam): String
      - getConnectionProperties(MySQLConnectionParam, String, String): Properties
      + castDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getConnection(ConnectionParam): Connection
      + createDatasourceParamDTO(String): BaseDataSourceParamDTO
      + getDbType(): DbType
      + splitAndRemoveComment(String): List<String>
      + getValidationQuery(): String
      + create(): DataSourceProcessor
      + getDatasourceDriver(): String
      - checkKeyIsLegitimate(String): boolean
    }
}

package "TASK" #DDDDDD {
    class SqlTask {
      + SqlTask(TaskExecutionContext):
      - CREATE_OR_REPLACE_FUNCTION_FORMAT: String
      - sqlTaskExecutionContext: SQLTaskExecutionContext
      - log: Logger
      - sqlParameters: SqlParameters
      - baseConnectionParam: BaseConnectionParam
      - QUERY_LIMIT: int
      + TEST_FLAG_YES: int
      - dbType: DbType
      - taskExecutionContext: TaskExecutionContext
      - resultProcess(ResultSet): String
      + cancel(): void
      - executeUpdate(Connection, List<SqlBinds>, String): String
      - printReplacedSql(String, String, String, Map<Integer, Property>): void
      - getSqlAndSqlParamsMap(String): SqlBinds
      - generateEmptyRow(ResultSet): ArrayNode
      - setNonQuerySqlReturn(String, List<Property>): String
      + handle(TaskCallBack): void
      + getParameters(): AbstractParameters
      - replaceOriginalValue(String, String, Map<String, Property>): String
      + executeFuncAndSql(List<SqlBinds>, List<SqlBinds>, List<SqlBinds>): void
      - prepareStatementAndBind(Connection, SqlBinds): PreparedStatement
      - close(Connection): void
      - sendAttachment(int, String, String): void
      - executeQuery(Connection, SqlBinds, String): String
    }
    note right of SqlTask:获取DataSourceProcessor=\n1、DataSourceProcessorProvider.getDataSourceProcessor(dbType)\n 2、AdHocDataSourceClient = \nDataSourceClientProvider.getAdHocDataSourceClient(dbType,baseConnectionParam)
}


DataSourceProcessor                                                             ^-[#008200,dashed]-                     AbstractDataSourceProcessor
DataSourceProcessor                 "dataSourceProcessorMap*"                   <-[#595959,plain]-* "1"                 DataSourceProcessorManager
AbstractDataSourceProcessor                                                     ^-[#000082,plain]-                      PostgreSQLDataSourceProcessor
DataSourceProcessorManager          "dataSourcePluginManager\n1"                <-[#595959,plain]-* "\n1"               DataSourceProcessorProvider
DataSourceProcessorManager                                                      <-[#595959,dashed]-                     DataSourceProcessorProvider : "«create»"


DataSourceClient                                                                ^-[#008200,plain]-                      AdHocDataSourceClient
DataSourceClient                                                                ^-[#008200,plain]-                      PooledDataSourceClient
AdHocDataSourceClient                                                           ^-[#008200,dashed]-                     BaseAdHocDataSourceClient
PooledDataSourceClient                                                          ^-[#008200,dashed]-                     BasePooledDataSourceClient
BaseConnectionParam             "baseConnectionParam\n1"                        <-[#595959,plain]-* "1"                 BasePooledDataSourceClient
BaseConnectionParam             "baseConnectionParam\n1"                        <-[#595959,plain]-* "1"                 BaseAdHocDataSourceClient
ConnectionParam                                                                 ^-[#008200,dashed]-                     BaseConnectionParam
BaseConnectionParam                                                             ^-[#000082,plain]-                      DefaultConnectionParam

PrioritySPI                                                                     <-[#595959,dashed]-                     PrioritySPIFactory
PrioritySPI                                                                     ^-[#008200,plain]-                      DataSourceChannelFactory
DataSourceChannel               "datasourceChannelMap\n*"                       <-[#595959,plain]-* "1"                 DataSourcePluginManager
PrioritySPIFactory                                                              <-[#595959,dashed]-                     DataSourcePluginManager            : "«create»"
DataSourcePluginManager                                                         <-[#595959,dashed]-                     DataSourceClientProvider           : "«create»"
DataSourcePluginManager        "dataSourcePluginManager\n1"                     <-[#595959,plain]-* "1"                 DataSourceClientProvider

'POSTGRESQL
DataSourceChannel                                                               ^-[#008200,dashed]-                     PostgreSQLDataSourceChannel
PostgreAdHocSQLDataSourceClient                                                 <-[#595959,dashed]-                     PostgreSQLDataSourceChannel         : "«create»"
PostgreSQLDataSourceChannel                                                     <-[#595959,dashed]-                     PostgreSQLDataSourceChannelFactory  : "«create»"
PostgreSQLDataSourceParamDTO                                                    <-[#595959,dashed]-                     PostgreSQLDataSourceProcessor       : "«create»"
BaseConnectionParam                                                             ^-[#000082,plain]-                      PostgreSQLConnectionParam
PostgreSQLConnectionParam                                                       <-[#595959,dashed]-                     PostgreSQLDataSourceProcessor       : "«create»"
BaseAdHocDataSourceClient                                                       ^-[#000082,plain]-                      PostgreAdHocSQLDataSourceClient
DataSourceChannelFactory                                                        ^-[#008200,dashed]-                     PostgreSQLDataSourceChannelFactory
'POSTGRESQL

'MYSQL
'AbstractDataSourceProcessor                                                     ^-[#000082,plain]-                      MySQLDataSourceProcessor
'BaseAdHocDataSourceClient                                                       ^-[#000082,plain]-                      MySQLAdHocDataSourceClient
'MYSQL

'SQL-TASK
BaseConnectionParam "baseConnectionParam\n1"<-[#595959,plain]-* "1" SqlTask
'SQL-TASK




@enduml
